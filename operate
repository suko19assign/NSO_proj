#!/usr/bin/env python3
"""
operate â€“ reconciliation loop for service nodes named <tag>_<N>
"""
import argparse, logging, os, re, signal, stat, time, subprocess
from common import (
    conn_from_rc, pick_image, choose_flavor, wait_active, wait_ssh, build_cfg
)

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(message)s")
LOG = logging.getLogger("operate")
NUMERIC = re.compile(r"_(\d+)$")
stop = False
signal.signal(signal.SIGINT, lambda *_: globals().update(stop=True))


def desired() -> int:
    try:
        return int(open("servers.conf").read().strip())
    except Exception:
        return 3


def index(name, tag):
    m = NUMERIC.search(name) if name.startswith(f"{tag}_") else None
    return int(m.group(1)) if m else None


def first_fixed_ip(conn, server, timeout=300):
    start = time.time()
    while time.time() - start < timeout:
        s = conn.compute.get_server(server.id)
        for nets in (s.addresses or {}).values():
            for a in nets:
                if a.get("OS-EXT-IPS:type") == "fixed":
                    return a["addr"]
        time.sleep(5)
    raise TimeoutError("no fixed IP")


def bast_fip(server):
    for nets in server.addresses.values():
        for a in nets:
            if a.get("OS-EXT-IPS:type") == "floating":
                return a["addr"]


def main(rc, tag, priv):
    conn = conn_from_rc(rc)
    image = pick_image(conn)
    flavor = choose_flavor(conn, 1, 512)
    net = conn.network.find_network(f"{tag}_net")
    sg = conn.network.find_security_group(f"{tag}_sg_nodes")
    bastion = conn.compute.find_server(f"{tag}_bastion")
    proxy_srv = conn.compute.find_server(f"{tag}_proxy")
    bast_ip = bast_fip(bastion)
    proxy_fixed = first_fixed_ip(conn, proxy_srv)
    cfg = f"{tag}_SSHconfig"

    while not stop:
        wanted = desired()
        all_srv = list(conn.compute.servers(details=False))
        nodes = [
            s for s in all_srv
            if index(s.name, tag) is not None
            and not s.name.endswith(("_proxy", "_bastion"))
        ]
        diff = wanted - len(nodes)
        LOG.info("Desired %d nodes; have %d", wanted, len(nodes))

        if diff > 0:
            LOG.info("Scaling out by %d nodes", diff)
            highest = max((index(s.name, tag) for s in nodes), default=0)
            new_nodes = []
            for n in range(1, diff + 1):
                idx = highest + n
                name = f"{tag}_{idx}"
                LOG.info("  Launching %s", name)
                srv = conn.compute.create_server(
                    name=name, image_id=image.id, flavor_id=flavor.id,
                    networks=[{"uuid": net.id}], key_name=f"{tag}_key",
                    security_groups=[{"name": sg.name}],
                )
                wait_active(conn, srv)
                new_nodes.append(srv)
                nodes.append(srv)

            pairs = [(s.name, first_fixed_ip(conn, s)) for s in nodes]
            build_cfg(cfg, priv, bast_ip, pairs,
                      proxy_ip=proxy_fixed, tag=tag)
            for srv in new_nodes:
                wait_ssh(srv.name, "ubuntu", priv, ssh_config=cfg)

            # ensure common.py is executable for inventory
            _run_playbook(rc, tag, priv, cfg)

        elif diff < 0:
            LOG.info("Scaling in by %d nodes", -diff)
            victims = sorted(nodes, key=lambda s: index(s.name, tag), reverse=True)[: -diff]
            for srv in victims:
                LOG.info("  Deleting %s", srv.name)
                conn.compute.delete_server(srv.id)

            time.sleep(10)
            remain = [   
                 s for s in conn.compute.servers(details=False)
                 if index(s.name, tag) is not None
                 and not s.name.endswith(("_proxy", "_bastion"))
            ]
            pairs = [(s.name, first_fixed_ip(conn, s)) for s in remain]
            build_cfg(cfg, priv, bast_ip, pairs)

            # ensure common.py is executable
            _run_playbook(rc, tag, priv, cfg)

        for _ in range(30):
            if stop:
                break
            time.sleep(1)

    LOG.info("Operate loop exited")


def _run_playbook(rc_path, tag, priv_key, ssh_cfg):
    """Invoke site.yaml with dynamic inventory."""
    if os.path.exists("common.py"):
        mode = os.stat("common.py").st_mode
        os.chmod("common.py", mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)

    env = os.environ.copy()
    env.update({
        "OPENRC": rc_path,
        "TAG": tag,
        "SSH_KEY": priv_key,
        "ANSIBLE_HOST_KEY_CHECKING": "False",
        "ANSIBLE_SSH_COMMON_ARGS": f"-F {ssh_cfg}",
    })
    subprocess.run(
        ["ansible-playbook", "-i", "common.py", "site.yaml"],
        env=env,
        check=False,
    )

if __name__ == "__main__":
    p = argparse.ArgumentParser()
    p.add_argument("openrc")
    p.add_argument("tag")
    p.add_argument("ssh_key")
    a = p.parse_args()
    main(a.openrc, a.tag, a.ssh_key)

