#!/usr/bin/env python3
import argparse, logging, os, signal, time, sys
import common
from common import conn_from_rc, pick_image, wait_active

stop=False
signal.signal(signal.SIGINT, lambda *_: globals().update(stop=True))
logging.basicConfig(level=logging.INFO,format="%(asctime)s %(message)s")

def desired():
    try:
        return int(open("servers.conf").read().strip())
    except:
        return 3

def main(rc,tag,key):
    conn=conn_from_rc(rc)
    img=pick_image(conn)
    fl_node=conn.compute.find_flavor('m1.tiny')
    net_id=conn.network.find_network(f"{tag}_net").id
    sg_nodes=conn.network.find_security_group(f"{tag}_sg_nodes")
    kname=f"{tag}_key"
    while not stop:
        want=desired()
        nodes=[s for s in conn.compute.servers(details=False) if s.name.startswith(f"{tag}_") and s.name[len(tag)+1:].isdigit()]
        diff=want-len(nodes)
        logging.info("desired=%d have=%d",want,len(nodes))
        if diff>0:
            for n in range(len(nodes)+1,len(nodes)+diff+1):
                srv=conn.compute.create_server(name=f"{tag}_{n}",image_id=img.id,flavor_id=fl_node.id,
                                               networks=[{'uuid':net_id}],key_name=kname,
                                               security_groups=[{'name':sg_nodes.name}],tags=[tag])
                wait_active(conn,srv)
            os.system(f"OPENRC={rc} TAG={tag} ansible-playbook -i inventory.py site.yaml")
        elif diff<0:
            for srv in sorted(nodes,key=lambda s:s.name,reverse=True)[:abs(diff)]:
                conn.compute.delete_server(srv.id)
        for _ in range(30):
            if stop: break
            time.sleep(1)

if __name__=='__main__':
    p=argparse.ArgumentParser()
    p.add_argument("openrc"); p.add_argument("tag"); p.add_argument("ssh_key")
    args=p.parse_args()
    main(args.openrc,args.tag,args.ssh_key)
