#!/usr/bin/env python3
"""
install – deploy network, bastion, proxy and three service nodes, then
run the Ansible playbook.
"""
import argparse
import logging
import os
import stat
import subprocess
import time
from openstack import exceptions as os_exc

from common import (
    conn_from_rc,
    pick_image,
    wait_active,
    choose_flavor,
    wait_ssh,
    build_cfg,
)

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(message)s")
LOG = logging.getLogger("install")


#helper
def find_ext_net(conn):
    for n in conn.network.networks():
        if getattr(n, "is_router_external", False):
            return n
    raise RuntimeError("No external router network found")


def rule(proto, port):
    base = dict(direction="ingress", protocol=proto, remote_ip_prefix="0.0.0.0/0")
    if port is not None:
        base["port_range_min"] = base["port_range_max"] = port
    return base


def ensure_sg(conn, name, rules):
    LOG.info("Ensuring security-group %s", name)
    sg = conn.network.find_security_group(name) or conn.network.create_security_group(
        name=name
    )

    existing = {
        (
            r.get("protocol") if isinstance(r, dict) else r.protocol,
            r.get("port_range_min") if isinstance(r, dict) else r.port_range_min,
            r.get("port_range_max") if isinstance(r, dict) else r.port_range_max,
        )
        for r in sg.security_group_rules
    }
    for proto, port in rules:
        key = (proto, port, port)
        if key not in existing:
            conn.network.create_security_group_rule(
                security_group_id=sg.id, **rule(proto, port)
            )
    return sg


def alloc_fip(conn, server, ext_net):

    for nets in (server.addresses or {}).values():
        for addr in nets:
            if addr.get("OS-EXT-IPS:type") == "floating":
                return addr["addr"]

    fip = next(
        (ip for ip in conn.network.ips()
         if not ip.port_id and ip.floating_network_id == ext_net.id),
        None,
    ) or conn.network.create_ip(floating_network_id=ext_net.id)

    port = next(iter(conn.network.ports(device_id=server.id)))
    try:
        conn.network.update_ip(fip, port_id=port.id)
    except os_exc.ConflictException:
        LOG.warning(
            "Floating IP race detected; discovering already-attached FIP …"
        )
        server = conn.compute.get_server(server.id)
        for nets in server.addresses.values():
            for a in nets:
                if a.get("OS-EXT-IPS:type") == "floating":
                    return a["addr"]
        raise

    return fip.floating_ip_address


def expand_keys(path):
    path = os.path.expanduser(path)
    return (path[:-4], path) if path.endswith(".pub") else (path, path + ".pub")


def wait_fixed_ip(conn, server, timeout=300):
    start = time.time()
    while time.time() - start < timeout:
        srv = conn.compute.get_server(server.id)
        for nets in (srv.addresses or {}).values():
            for addr in nets:
                if addr.get("OS-EXT-IPS:type") == "fixed":
                    return addr["addr"]
        time.sleep(5)
    raise TimeoutError(f"{server.name} has no fixed IP after {timeout}s")


#main 
def main(rc, tag, key_path):
    priv, pub = expand_keys(key_path)
    if not os.path.exists(pub):
        LOG.error("Public key %s not found", pub)
        return

    LOG.info("Connecting to OpenStack")
    conn = conn_from_rc(rc)
    ext_net = find_ext_net(conn)
    LOG.info("Using external network %s", ext_net.name)

    # key-pair
    kname = f"{tag}_key"
    if not conn.compute.find_keypair(kname):
        LOG.info("Uploading key-pair %s", kname)
        conn.compute.create_keypair(name=kname, public_key=open(pub).read())

    # network, subnet, router
    net = conn.network.find_network(f"{tag}_net")
    if not net:
        LOG.info("Creating network, subnet and router")
        net = conn.network.create_network(name=f"{tag}_net")
        subnet = conn.network.create_subnet(
            name=f"{tag}_subnet",
            network_id=net.id,
            ip_version=4,
            cidr="10.0.0.0/24",
            gateway_ip="10.0.0.1",
            dns_nameservers=["8.8.8.8"],
        )
        router = conn.network.create_router(
            name=f"{tag}_rt", external_gateway_info={"network_id": ext_net.id}
        )
        conn.network.add_interface_to_router(router, subnet_id=subnet.id)
    else:
        LOG.info("Network %s already exists", net.name)

    # security groups
    sg_nodes = ensure_sg(
        conn,
        f"{tag}_sg_nodes",
        [("tcp", 22), ("tcp", 5000), ("udp", 6000), ("icmp", None)],
    )
    sg_bast = ensure_sg(
        conn, f"{tag}_sg_bastion", [("tcp", 22), ("tcp", 7000), ("icmp", None)]
    )
    sg_proxy = ensure_sg(
        conn,
        f"{tag}_sg_proxy",
        [("tcp", 22), ("tcp", 5000), ("udp", 6000), ("icmp", None)],
    )

    # image / flavor
    img = pick_image(conn)
    flv = choose_flavor(conn, min_vcpu=1, min_ram=512)

    # bastion
    LOG.info("Launching bastion")
    bastion = conn.compute.find_server(f"{tag}_bastion") or conn.compute.create_server(
        name=f"{tag}_bastion",
        image_id=img.id,
        flavor_id=flv.id,
        networks=[{"uuid": net.id}],
        key_name=kname,
        security_groups=[{"name": sg_bast.name}],
    )
    wait_active(conn, bastion)
    bast_ip = alloc_fip(conn, bastion, ext_net)
    wait_ssh(bast_ip, "ubuntu", priv)

    # proxy
    LOG.info("Launching proxy")
    proxy = conn.compute.find_server(f"{tag}_proxy") or conn.compute.create_server(
        name=f"{tag}_proxy",
        image_id=img.id,
        flavor_id=flv.id,
        networks=[{"uuid": net.id}],
        key_name=kname,
        security_groups=[{"name": sg_proxy.name}],
    )
    wait_active(conn, proxy)
    proxy_ip = alloc_fip(conn, proxy, ext_net)
    proxy_fixed = wait_fixed_ip(conn, proxy)

    # service nodes
    service_nodes = []
    for i in range(1, 4):
        LOG.info("Launching service node %d", i)
        node = conn.compute.find_server(f"{tag}_{i}") or conn.compute.create_server(
            name=f"{tag}_{i}",
            image_id=img.id,
            flavor_id=flv.id,
            networks=[{"uuid": net.id}],
            key_name=kname,
            security_groups=[{"name": sg_nodes.name}],
        )
        wait_active(conn, node)
        service_nodes.append(node)

    # SSH config
    ssh_cfg = f"{tag}_SSHconfig"
    LOG.info("Writing SSH config %s", ssh_cfg)
    pairs = [(node.name, wait_fixed_ip(conn, node)) for node in service_nodes]
    build_cfg(ssh_cfg, priv, bast_ip, pairs,
              proxy_ip=proxy_fixed, tag=tag)

    # confirm SSH readiness
    LOG.info("Waiting for SSH on all service nodes")
    for node in service_nodes:
        wait_ssh(node.name, "ubuntu", priv, ssh_config=ssh_cfg)

    # ----- ensure common.py is executable for Ansible inventory -----
    if os.path.exists("common.py"):
        mode = os.stat("common.py").st_mode
        os.chmod("common.py", mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)

    # run Ansible
    env = os.environ.copy()
    env.update({
        "OPENRC": rc,
        "TAG": tag,
        "SSH_KEY": priv,
        "ANSIBLE_HOST_KEY_CHECKING": "False",
        "ANSIBLE_SSH_COMMON_ARGS": f"-F {ssh_cfg}",
    })
    LOG.info("Starting Ansible playbook")
    subprocess.run(
        ["ansible-playbook", "-i", "common.py", "site.yaml"],
        env=env,
        check=True,
    )

    LOG.info("Deployment finished – bastion=%s  proxy=%s", bast_ip, proxy_ip)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("openrc")
    parser.add_argument("tag")
    parser.add_argument("ssh_key")
    args = parser.parse_args()
    main(args.openrc, args.tag, args.ssh_key)
